SQL Nivel de bloqueo

/* NoLock is not a lock mode, but a flag value meaning "don't get a lock" */
#define NoLock					0
#define AccessShareLock			1		/* SELECT */
#define RowShareLock			2		/* SELECT FOR UPDATE/FOR SHARE */
#define RowExclusiveLock		3		/* INSERT, UPDATE, DELETE */
#define ShareUpdateExclusiveLock 4		/* VACUUM (non-FULL),ANALYZE, CREATE INDEX CONCURRENTLY */
#define ShareLock				5		/* CREATE INDEX (WITHOUT CONCURRENTLY) */
#define ShareRowExclusiveLock	6		/* like EXCLUSIVE MODE, but allows ROW SHARE */
#define ExclusiveLock			7		/* blocks ROW SHARE/SELECT...FOR UPDATE */
#define AccessExclusiveLock		8		/* ALTER TABLE, DROP TABLE, VACUUM FULL, and unqualified LOCK TABLE */

Verifique o monitoree bloqueos a través de las vistas proporcionadas por PostgreSQL
1.  pg_locks muestra información de bloqueo, un registro por cada objeto bloqueado o en espera
2.  pg_stat_activity, un registro para cada sesión, muestra información sobre el estado de la sesión

Ver bloqueo de otros / procesos bloqueados

select locktype,mode,relation::regclass as rel,page||','||tuple as ctid,virtualxid as vxid,transactionid as xid,virtualtransaction as vxid2,pid,granted
from pg_locks
where granted in ('t','f');

Nota: concedido = t es para bloquear a otros, f es para ser bloqueado


Ver bloqueo de otros / procesos bloqueados
select locktype,mode,relation::regclass as rel,page||','||tuple as ctid,virtualxid as vxid,transactionid as xid,virtualtransaction as vxid2,pid,granted
from pg_locks
where granted in ('t','f');

Nota: concedido = t es para bloquear a otros, f es para ser bloqueado

Consultar información específica de sql a través de pid
SELECT xact_start, query_start, backend_start, state_change, state FROM pg_stat_activity WHERE pid IN (Pid de bloqueo conocido);


Finalizar sesión de bloqueo:
Opcion 1
 SELECT pg_cancel_backend(Pid bloqueado);

Opcion 2
 SELECT pg_terminate_backend(Pid bloqueado);

--
-- Consultar la información SQL del bloqueo actual esperando y manteniendo el bloqueo
--
with t_wait as (
  select 	a.mode, 	a.locktype,  	a.database, a.relation, 	a.page, 	a.tuple, 	a.classid, 	a.granted, 	a.objid,
	  a.objsubid, 	a.pid, 	a.virtualtransaction, 	a.virtualxid,  	a.transactionid,	a.fastpath, 	b.state,
	  b.query,	b.xact_start,	b.query_start,	b.usename,	b.datname,	b.client_addr,	b.client_port,	b.application_name
  from
    pg_locks a,
    pg_stat_activity b
  where
    a.pid = b.pid
    and not a.granted ),
    t_run as (
  select
	  a.mode,	a.locktype,	a.database,	a.relation,	a.page,	a.tuple,	a.classid,	a.granted,	a.objid,
	  a.objsubid,	a.pid,	a.virtualtransaction,	a.virtualxid,	a.transactionid,	a.fastpath,	b.state,
	  b.query,	b.xact_start,	b.query_start,	b.usename,	b.datname,	b.client_addr,	b.client_port,	b.application_name
  from
    pg_locks a,
    pg_stat_activity b
  where
    a.pid = b.pid
    and a.granted ),
  t_overlap as (
  select 	r.*
  from 	t_wait w
    join t_run r on 	( r.locktype is not distinct from w.locktype
      and r.database is not distinct from 	w.database
      and r.relation is not distinct from 	w.relation
      and r.page is not distinct from 	w.page
      and r.tuple is not distinct from 	w.tuple
      and r.virtualxid is not distinct from 	w.virtualxid
      and r.transactionid is not distinct from 	w.transactionid
      and r.classid is not distinct from 	w.classid
      and r.objid is not distinct from 	w.objid 	
      and r.objsubid is not distinct from 	w.objsubid
      and r.pid <> w.pid ) ),
  t_unionall as (
  select 	r.* from 	t_overlap r
  
  union all
select
	w.*
from
	t_wait w )
select
	locktype,
	datname,
	relation::regclass,
	page,
	tuple,
	virtualxid,
	transactionid::text,
	classid::regclass,
	objid,
	objsubid,
	string_agg( 'Pid: ' || case when pid is null then 'NULL' else pid::text end || chr(10)|| 'Lock_Granted: ' || case when granted is null then 'NULL' else granted::text end || ' , Mode: ' || case when mode is null then 'NULL' else mode::text end || ' , FastPath: ' || case when fastpath is null then 'NULL' else fastpath::text end || ' , VirtualTransaction: ' || case when virtualtransaction is null then 'NULL' else virtualtransaction::text end || ' , Session_State: ' || case when state is null then 'NULL' else state::text end || chr(10)|| 'Username: ' || case when usename is null then 'NULL' else usename::text end || ' , Database: ' || case when datname is null then 'NULL' else datname::text end || ' , Client_Addr: ' || case when client_addr is null then 'NULL' else client_addr::text end || ' , Client_Port: ' || case when client_port is null then 'NULL' else client_port::text end || ' , Application_Name: ' || case when application_name is null then 'NULL' else application_name::text end || chr(10)|| 'Xact_Start: ' || case when xact_start is null then 'NULL' else xact_start::text end || ' , Query_Start: ' || case when query_start is null then 'NULL' else query_start::text end || ' , Xact_Elapse: ' || case when (now()-xact_start) is null then 'NULL' else (now()-xact_start)::text end || ' , Query_Elapse: ' || case when (now()-query_start) is null then 'NULL' else (now()-query_start)::text end || chr(10)|| 'SQL (Current SQL in Transaction): ' || chr(10)|| case when query is null then 'NULL' else query::text end, chr(10)|| '--------' || chr(10) order by ( case mode when 'INVALID' then 0 when 'AccessShareLock' then 1 when 'RowShareLock' then 2 when 'RowExclusiveLock' then 3 when 'ShareUpdateExclusiveLock' then 4 when 'ShareLock' then 5 when 'ShareRowExclusiveLock' then 6 when 'ExclusiveLock' then 7 when 'AccessExclusiveLock' then 8 else 0 end ) desc, (case when granted then 0 else 1 end) ) as lock_conflict
from
	t_unionall
group by
	locktype,
	datname,
	relation,
	page,
	tuple,
	virtualxid,
	transactionid::text,
	classid,
	objid,
	objsubid ;

    
--
-- XXXXXXXX
--
with t_wait as  (    
	  select a.mode,a.locktype,a.database,a.relation,a.page,a.tuple,a.classid,a.granted,   
	  a.objid,a.objsubid,a.pid,a.virtualtransaction,a.virtualxid,a.transactionid,a.fastpath,    
	  b.state,b.query,b.xact_start,b.query_start,b.usename,b.datname,b.client_addr,b.client_port,b.application_name   
		from pg_locks a,pg_stat_activity b where a.pid=b.pid and not a.granted   
	),   
	t_run as  (   
	  select a.mode,a.locktype,a.database,a.relation,a.page,a.tuple,a.classid,a.granted,   
	  a.objid,a.objsubid,a.pid,a.virtualtransaction,a.virtualxid,a.transactionid,a.fastpath,   
	  b.state,b.query,b.xact_start,b.query_start,b.usename,b.datname,b.client_addr,b.client_port,b.application_name   
		from pg_locks a,pg_stat_activity b where a.pid=b.pid and a.granted   
	),   
	t_overlap as  (   
	  select r.* from t_wait w join t_run r on   (   
		r.locktype is not distinct from w.locktype and   
		r.database is not distinct from w.database and   
		r.relation is not distinct from w.relation and   
		r.page is not distinct from w.page and   
		r.tuple is not distinct from w.tuple and   
		r.virtualxid is not distinct from w.virtualxid and   
		r.transactionid is not distinct from w.transactionid and   
		r.classid is not distinct from w.classid and   
		r.objid is not distinct from w.objid and   
		r.objsubid is not distinct from w.objsubid and   
		r.pid <> w.pid   )    
	),    
	t_unionall as  (    
	  select r.* from t_overlap r  union all  select w.* from t_wait w    
	)    
	select locktype,datname,relation::regclass,page,tuple,virtualxid,transactionid::text,classid::regclass,objid,objsubid,   
	string_agg(   
	'Pid: '||case when pid is null then 'NULL' else pid::text end||chr(10)||   
	'Lock_Granted: '||case when granted is null then 'NULL' else granted::text end||' , Mode: '||case when mode is null then 'NULL' else mode::text end||' , FastPath: '||case when fastpath is null then 'NULL' else fastpath::text end||' , VirtualTransaction: '||case when virtualtransaction is null then 'NULL' else virtualtransaction::text end||' , Session_State: '||case when state is null then 'NULL' else state::text end||chr(10)||   
	'Username: '||case when usename is null then 'NULL' else usename::text end||' , Database: '||case when datname is null then 'NULL' else datname::text end||' , Client_Addr: '||case when client_addr is null then 'NULL' else client_addr::text end||' , Client_Port: '||case when client_port is null then 'NULL' else client_port::text end||' , Application_Name: '||case when application_name is null then 'NULL' else application_name::text end||chr(10)||    
	'Xact_Start: '||case when xact_start is null then 'NULL' else xact_start::text end||' , Query_Start: '||case when query_start is null then 'NULL' else query_start::text end||' , Xact_Elapse: '||case when (now()-xact_start) is null then 'NULL' else (now()-xact_start)::text end||' , Query_Elapse: '||case when (now()-query_start) is null then 'NULL' else (now()-query_start)::text end||chr(10)||    
	'SQL (Current SQL in Transaction): '||chr(10)||  
	case when query is null then 'NULL' else query::text end,    
	chr(10)||'--------'||chr(10)    
	order by    
	  (  case mode    
		when 'INVALID' then 0   
		when 'AccessShareLock' then 1   
		when 'RowShareLock' then 2   
		when 'RowExclusiveLock' then 3   
		when 'ShareUpdateExclusiveLock' then 4   
		when 'ShareLock' then 5   
		when 'ShareRowExclusiveLock' then 6   
		when 'ExclusiveLock' then 7   
		when 'AccessExclusiveLock' then 8   
		else 0   
	  end  ) desc,   
	  (case when granted then 0 else 1 end)  
	) as lock_conflict  
	from t_unionall   
	group by   
	locktype,datname,relation,page,tuple,virtualxid,transactionid::text,classid,objid,objsubid ; 

--   
-- Análisis de bloqueo
-- 

La página de fila bloqueada y los campos de tupla (su combinación es el valor del campo del sistema ctid en la tabla)
Suponiendo que se detecta ctid = (0,1), se ejecuta la siguiente declaración y la fila detectada es la fila bloqueada.
seleccione * del nombre de la tabla bloqueada donde ctid = ’(0,1)’;
